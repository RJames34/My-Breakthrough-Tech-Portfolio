{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab 8: Define and Solve an ML Problem of Your Choosing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this lab assignment, you will follow the machine learning life cycle and implement a model to solve a machine learning problem of your choosing. You will select a data set and choose a predictive problem that the data set supports.  You will then inspect the data with your problem in mind and begin to formulate a  project plan. You will then implement the machine learning project plan. \n",
    "\n",
    "You will complete the following tasks:\n",
    "\n",
    "1. Build Your DataFrame\n",
    "2. Define Your ML Problem\n",
    "3. Perform exploratory data analysis to understand your data.\n",
    "4. Define Your Project Plan\n",
    "5. Implement Your Project Plan:\n",
    "    * Prepare your data for your model.\n",
    "    * Fit your model to the training data and evaluate your model.\n",
    "    * Improve your model's performance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1: Build Your DataFrame\n",
    "\n",
    "You will have the option to choose one of four data sets that you have worked with in this program:\n",
    "\n",
    "* The \"census\" data set that contains Census information from 1994: `censusData.csv`\n",
    "* Airbnb NYC \"listings\" data set: `airbnbListingsData.csv`\n",
    "* World Happiness Report (WHR) data set: `WHR2018Chapter2OnlineData.csv`\n",
    "* Book Review data set: `bookReviewsData.csv`\n",
    "\n",
    "Note that these are variations of the data sets that you have worked with in this program. For example, some do not include some of the preprocessing necessary for specific models. \n",
    "\n",
    "#### Load a Data Set and Save it as a Pandas DataFrame\n",
    "\n",
    "The code cell below contains filenames (path + filename) for each of the four data sets available to you.\n",
    "\n",
    "<b>Task:</b> In the code cell below, use the same method you have been using to load the data using `pd.read_csv()` and save it to DataFrame `df`. \n",
    "\n",
    "You can load each file as a new DataFrame to inspect the data before choosing your data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>workclass</th>\n",
       "      <th>fnlwgt</th>\n",
       "      <th>education</th>\n",
       "      <th>education-num</th>\n",
       "      <th>marital-status</th>\n",
       "      <th>occupation</th>\n",
       "      <th>relationship</th>\n",
       "      <th>race</th>\n",
       "      <th>sex_selfID</th>\n",
       "      <th>capital-gain</th>\n",
       "      <th>capital-loss</th>\n",
       "      <th>hours-per-week</th>\n",
       "      <th>native-country</th>\n",
       "      <th>income_binary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39.0</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>77516</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Non-Female</td>\n",
       "      <td>2174</td>\n",
       "      <td>0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50.0</td>\n",
       "      <td>Self-emp-not-inc</td>\n",
       "      <td>83311</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Non-Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>Private</td>\n",
       "      <td>215646</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Non-Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53.0</td>\n",
       "      <td>Private</td>\n",
       "      <td>234721</td>\n",
       "      <td>11th</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Black</td>\n",
       "      <td>Non-Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28.0</td>\n",
       "      <td>Private</td>\n",
       "      <td>338409</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Wife</td>\n",
       "      <td>Black</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age         workclass  fnlwgt  education  education-num  \\\n",
       "0  39.0         State-gov   77516  Bachelors             13   \n",
       "1  50.0  Self-emp-not-inc   83311  Bachelors             13   \n",
       "2  38.0           Private  215646    HS-grad              9   \n",
       "3  53.0           Private  234721       11th              7   \n",
       "4  28.0           Private  338409  Bachelors             13   \n",
       "\n",
       "       marital-status         occupation   relationship   race  sex_selfID  \\\n",
       "0       Never-married       Adm-clerical  Not-in-family  White  Non-Female   \n",
       "1  Married-civ-spouse    Exec-managerial        Husband  White  Non-Female   \n",
       "2            Divorced  Handlers-cleaners  Not-in-family  White  Non-Female   \n",
       "3  Married-civ-spouse  Handlers-cleaners        Husband  Black  Non-Female   \n",
       "4  Married-civ-spouse     Prof-specialty           Wife  Black      Female   \n",
       "\n",
       "   capital-gain  capital-loss  hours-per-week native-country income_binary  \n",
       "0          2174             0            40.0  United-States         <=50K  \n",
       "1             0             0            13.0  United-States         <=50K  \n",
       "2             0             0            40.0  United-States         <=50K  \n",
       "3             0             0            40.0  United-States         <=50K  \n",
       "4             0             0            40.0           Cuba         <=50K  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# File names of the four data sets\n",
    "adultDataSet_filename = os.path.join(os.getcwd(), \"data\", \"censusData.csv\")\n",
    "airbnbDataSet_filename = os.path.join(os.getcwd(), \"data\", \"airbnbListingsData.csv\")\n",
    "WHRDataSet_filename = os.path.join(os.getcwd(), \"data\", \"WHR2018Chapter2OnlineData.csv\")\n",
    "bookReviewDataSet_filename = os.path.join(os.getcwd(), \"data\", \"bookReviewsData.csv\")\n",
    "\n",
    "\n",
    "df = pd.read_csv(adultDataSet_filename, header = 0) # YOUR CODE HERE\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: Define Your ML Problem\n",
    "\n",
    "Next you will formulate your ML Problem. In the markdown cell below, answer the following questions:\n",
    "\n",
    "1. List the data set you have chosen.\n",
    "2. What will you be predicting? What is the label?\n",
    "3. Is this a supervised or unsupervised learning problem? Is this a clustering, classification or regression problem? Is it a binary classificaiton or multi-class classifiction problem?\n",
    "4. What are your features? (note: this list may change after your explore your data)\n",
    "5. Explain why this is an important problem. In other words, how would a company create value with a model that predicts this label?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "1. The data set I have chosen is the censusData, which is stored in adultDataSet_filename variable.\n",
    " \n",
    "2. The label will be the age column, this is because the model will predict an indivuals age based off the other columns(our features) in the census data.\n",
    " \n",
    "3. This will be a supervised regression problem. This because I have a label which is the age column, that can take on multiple values and since the age column is msotly made out of floats, this fits closely to a regression problem.\n",
    "   \n",
    "4. My features will be the columns that aren't the age column. specifically workclass, education-num, marital-status, relationship, capital-gain, capital-loss, hours-per-week, income_binary. I intend on dropping the following columns fnlwgt, education, occupation, race, sex_selfID, native-country. This is because these features won't help in predicting the age label. \n",
    "\n",
    "5. This is an important problem because by being able to predict a customers age, this will allow the company to tailor certain products to said customer based off their age, or try to market towards a specific age group of people for furture products. This can also help with planning products for a certain age group in the future. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Understand Your Data\n",
    "\n",
    "The next step is to perform exploratory data analysis. Inspect and analyze your data set with your machine learning problem in mind. Consider the following as you inspect your data:\n",
    "\n",
    "1. What data preparation techniques would you like to use? These data preparation techniques may include:\n",
    "\n",
    "    * addressing missingness, such as replacing missing values with means\n",
    "    * finding and replacing outliers\n",
    "    * renaming features and labels\n",
    "    * finding and replacing outliers\n",
    "    * performing feature engineering techniques such as one-hot encoding on categorical features\n",
    "    * selecting appropriate features and removing irrelevant features\n",
    "    * performing specific data cleaning and preprocessing techniques for an NLP problem\n",
    "    * addressing class imbalance in your data sample to promote fair AI\n",
    "    \n",
    "\n",
    "2. What machine learning model (or models) you would like to use that is suitable for your predictive problem and data?\n",
    "    * Are there other data preparation techniques that you will need to apply to build a balanced modeling data set for your problem and model? For example, will you need to scale your data?\n",
    " \n",
    " \n",
    "3. How will you evaluate and improve the model's performance?\n",
    "    * Are there specific evaluation metrics and methods that are appropriate for your model?\n",
    "    \n",
    "\n",
    "Think of the different techniques you have used to inspect and analyze your data in this course. These include using Pandas to apply data filters, using the Pandas `describe()` method to get insight into key statistics for each column, using the Pandas `dtypes` property to inspect the data type of each column, and using Matplotlib and Seaborn to detect outliers and visualize relationships between features and labels. If you are working on a classification problem, use techniques you have learned to determine if there is class imbalance.\n",
    "\n",
    "<b>Task</b>: Use the techniques you have learned in this course to inspect and analyze your data. You can import additional packages that you have used in this course that you will need to perform this task.\n",
    "\n",
    "<b>Note</b>: You can add code cells if needed by going to the <b>Insert</b> menu and clicking on <b>Insert Cell Below</b> in the drop-drown menu."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    age         workclass  fnlwgt  education  education-num  \\\n",
      "0  39.0         State-gov   77516  Bachelors             13   \n",
      "1  50.0  Self-emp-not-inc   83311  Bachelors             13   \n",
      "2  38.0           Private  215646    HS-grad              9   \n",
      "3  53.0           Private  234721       11th              7   \n",
      "4  28.0           Private  338409  Bachelors             13   \n",
      "5  37.0           Private  284582    Masters             14   \n",
      "6  49.0           Private  160187        9th              5   \n",
      "7  52.0  Self-emp-not-inc  209642    HS-grad              9   \n",
      "8  31.0           Private   45781    Masters             14   \n",
      "9  42.0           Private  159449  Bachelors             13   \n",
      "\n",
      "          marital-status         occupation   relationship   race  sex_selfID  \\\n",
      "0          Never-married       Adm-clerical  Not-in-family  White  Non-Female   \n",
      "1     Married-civ-spouse    Exec-managerial        Husband  White  Non-Female   \n",
      "2               Divorced  Handlers-cleaners  Not-in-family  White  Non-Female   \n",
      "3     Married-civ-spouse  Handlers-cleaners        Husband  Black  Non-Female   \n",
      "4     Married-civ-spouse     Prof-specialty           Wife  Black      Female   \n",
      "5     Married-civ-spouse    Exec-managerial           Wife  White      Female   \n",
      "6  Married-spouse-absent      Other-service  Not-in-family  Black      Female   \n",
      "7     Married-civ-spouse    Exec-managerial        Husband  White  Non-Female   \n",
      "8          Never-married     Prof-specialty  Not-in-family  White      Female   \n",
      "9     Married-civ-spouse    Exec-managerial        Husband  White  Non-Female   \n",
      "\n",
      "   capital-gain  capital-loss  hours-per-week native-country income_binary  \n",
      "0          2174             0            40.0  United-States         <=50K  \n",
      "1             0             0            13.0  United-States         <=50K  \n",
      "2             0             0            40.0  United-States         <=50K  \n",
      "3             0             0            40.0  United-States         <=50K  \n",
      "4             0             0            40.0           Cuba         <=50K  \n",
      "5             0             0            40.0  United-States         <=50K  \n",
      "6             0             0            16.0        Jamaica         <=50K  \n",
      "7             0             0            45.0  United-States          >50K  \n",
      "8         14084             0            50.0  United-States          >50K  \n",
      "9          5178             0            40.0  United-States          >50K  \n",
      "age               float64\n",
      "workclass          object\n",
      "fnlwgt              int64\n",
      "education          object\n",
      "education-num       int64\n",
      "marital-status     object\n",
      "occupation         object\n",
      "relationship       object\n",
      "race               object\n",
      "sex_selfID         object\n",
      "capital-gain        int64\n",
      "capital-loss        int64\n",
      "hours-per-week    float64\n",
      "native-country     object\n",
      "income_binary      object\n",
      "dtype: object\n",
      "                 age workclass        fnlwgt education  education-num  \\\n",
      "count   32399.000000     30725  3.256100e+04     32561   32561.000000   \n",
      "unique           NaN         8           NaN        16            NaN   \n",
      "top              NaN   Private           NaN   HS-grad            NaN   \n",
      "freq             NaN     22696           NaN     10501            NaN   \n",
      "mean       38.589216       NaN  1.897784e+05       NaN      10.080679   \n",
      "std        13.647862       NaN  1.055500e+05       NaN       2.572720   \n",
      "min        17.000000       NaN  1.228500e+04       NaN       1.000000   \n",
      "25%        28.000000       NaN  1.178270e+05       NaN       9.000000   \n",
      "50%        37.000000       NaN  1.783560e+05       NaN      10.000000   \n",
      "75%        48.000000       NaN  2.370510e+05       NaN      12.000000   \n",
      "max        90.000000       NaN  1.484705e+06       NaN      16.000000   \n",
      "\n",
      "            marital-status      occupation relationship   race  sex_selfID  \\\n",
      "count                32561           30718        32561  32561       32561   \n",
      "unique                   7              14            6      5           2   \n",
      "top     Married-civ-spouse  Prof-specialty      Husband  White  Non-Female   \n",
      "freq                 14976            4140        13193  27816       21790   \n",
      "mean                   NaN             NaN          NaN    NaN         NaN   \n",
      "std                    NaN             NaN          NaN    NaN         NaN   \n",
      "min                    NaN             NaN          NaN    NaN         NaN   \n",
      "25%                    NaN             NaN          NaN    NaN         NaN   \n",
      "50%                    NaN             NaN          NaN    NaN         NaN   \n",
      "75%                    NaN             NaN          NaN    NaN         NaN   \n",
      "max                    NaN             NaN          NaN    NaN         NaN   \n",
      "\n",
      "        capital-gain  capital-loss  hours-per-week native-country  \\\n",
      "count   32561.000000  32561.000000    32236.000000          31978   \n",
      "unique           NaN           NaN             NaN             41   \n",
      "top              NaN           NaN             NaN  United-States   \n",
      "freq             NaN           NaN             NaN          29170   \n",
      "mean      615.907773     87.303830       40.450428            NaN   \n",
      "std      2420.191974    402.960219       12.353748            NaN   \n",
      "min         0.000000      0.000000        1.000000            NaN   \n",
      "25%         0.000000      0.000000       40.000000            NaN   \n",
      "50%         0.000000      0.000000       40.000000            NaN   \n",
      "75%         0.000000      0.000000       45.000000            NaN   \n",
      "max     14084.000000   4356.000000       99.000000            NaN   \n",
      "\n",
      "       income_binary  \n",
      "count          32561  \n",
      "unique             2  \n",
      "top            <=50K  \n",
      "freq           24720  \n",
      "mean             NaN  \n",
      "std              NaN  \n",
      "min              NaN  \n",
      "25%              NaN  \n",
      "50%              NaN  \n",
      "75%              NaN  \n",
      "max              NaN  \n",
      "age                162\n",
      "workclass         1836\n",
      "fnlwgt               0\n",
      "education            0\n",
      "education-num        0\n",
      "marital-status       0\n",
      "occupation        1843\n",
      "relationship         0\n",
      "race                 0\n",
      "sex_selfID           0\n",
      "capital-gain         0\n",
      "capital-loss         0\n",
      "hours-per-week     325\n",
      "native-country     583\n",
      "income_binary        0\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "\n",
    "#Look at the first 10 rows of our data frame \n",
    "print(df.head(10))\n",
    "\n",
    "print(df.dtypes)\n",
    "\n",
    "print(df.describe(include='all'))\n",
    "\n",
    "#Checking for missing values in the columns\n",
    "print(np.sum(df.isnull(), axis = 0))\n",
    "\n",
    "# Look at the the distribution of our Age label \n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.histplot(df['age'])\n",
    "plt.title(\"Distribution of Age\")\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Number of people this age\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 4: Define Your Project Plan\n",
    "\n",
    "Now that you understand your data, in the markdown cell below, define your plan to implement the remaining phases of the machine learning life cycle (data preparation, modeling, evaluation) to solve your ML problem. Answer the following questions:\n",
    "\n",
    "* Do you have a new feature list? If so, what are the features that you chose to keep and remove after inspecting the data? \n",
    "* Explain different data preparation techniques that you will use to prepare your data for modeling.\n",
    "* What is your model (or models)?\n",
    "* Describe your plan to train your model, analyze its performance and then improve the model. That is, describe your model building, validation and selection plan to produce a model that generalizes well to new data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "1. The new feature list does not include the following columns fnlwgt, education, occupation, race, sex_selfID, native-country. I chose to not include these columns because they would not help in predicting the age column, which is our label.\n",
    "\n",
    "2. The different data preparation techniques I will be using is one-hot encoding, handling missing values and replacing them with the mean of the column, and dropping columns that won't be helpful in predicting our label age. \n",
    "\n",
    "3. The models I will be using is the RandomForestRegressor and Linear Regression \n",
    "\n",
    "4. First off I will prepare the data, then I will create the training and test sets, after this I will train the RandomForestRegressor model, and evaluate it by using the RSME $R^2$ scores. After seeing the scores I will try to improve them by running a grid search, to find the best parameeters for the RandomForestRegressor model. After trying to imrpove the scores of the RandomForestRegressor if the scores don't improve I will train the Linear Regression Model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 5: Implement Your Project Plan\n",
    "\n",
    "<b>Task:</b> In the code cell below, import additional packages that you have used in this course that you will need to implement your project plan."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# YOUR CODE HERE\n",
    "\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Task:</b> Use the rest of this notebook to carry out your project plan. \n",
    "\n",
    "You will:\n",
    "\n",
    "1. Prepare your data for your model.\n",
    "2. Fit your model to the training data and evaluate your model.\n",
    "3. Improve your model's performance by performing model selection and/or feature selection techniques to find best model for your problem.\n",
    "\n",
    "Add code cells below and populate the notebook with commentary, code, analyses, results, and figures as you see fit. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# YOUR CODE HERE\n",
    "\n",
    "#1. Prepare your data for your model\n",
    "\n",
    "# Drop columns that won't help in predicting the label age\n",
    "df = df.drop(columns = ['fnlwgt', 'education', 'occupation', 'race', 'sex_selfID','native-country'])\n",
    "\n",
    "# Identify columns with there missing values \n",
    "nan_count = np.sum(df.isnull(), axis = 0)\n",
    "condition = nan_count != 0 # look for all columns with missing values\n",
    "col_names = nan_count[condition].index # get the column names\n",
    "nan_cols = list(col_names) # convert column names to list\n",
    "\n",
    "#Fill in these missing values with the mean of that column \n",
    "for col in nan_cols:\n",
    "    if df[col].dtype == 'int64' or df[col].dtype == 'float' :\n",
    "        # compute mean for all non null values\n",
    "        mean_of_col = df[col].mean()\n",
    "        # fill all missing values with the mean\n",
    "        df[col].fillna(value=mean_of_col, inplace=True)\n",
    "   \n",
    "\n",
    "# One hot encode columns with values that aren't of type as int or float \n",
    "to_encode =  list(df.select_dtypes(include=['object']).columns)\n",
    "\n",
    "for i in range(len(to_encode)):\n",
    "    curr_col_to_encode = pd.get_dummies(df[to_encode[i]], prefix=to_encode[i])\n",
    "    df = df.join(curr_col_to_encode)\n",
    "    df.drop(columns = to_encode[i], inplace=True)\n",
    "\n",
    "# spilt the label and feature columns \n",
    "y = df['age']\n",
    "X = df.drop(columns = 'age', axis=1)\n",
    "\n",
    "# #Create training set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25\n",
    ",random_state=1234)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[RF]  Root Mean Squared Error: 10.307232039542663\n",
      "[RF]  R2: 0.4207967127317238\n",
      "[LR]  Root Mean Squared Error: 10.625951621185179\n",
      "[LR]  R2: 0.3844227227975261\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.pyenv/versions/3.9.19/lib/python3.9/site-packages/sklearn/metrics/_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.\n",
      "  warnings.warn(\n",
      "/home/ubuntu/.pyenv/versions/3.9.19/lib/python3.9/site-packages/sklearn/metrics/_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# YOUR CODE \n",
    "# #2.Fit your model to the training data and evaluate your model.\n",
    "\n",
    "#RandomForest Regressor \n",
    "rf_model = RandomForestRegressor(max_depth= 30, min_samples_leaf = 3, \n",
    "                                 min_samples_split= 3, n_estimators =  300)\n",
    "\n",
    "rf_model.fit(X_train, y_train)\n",
    "rf_pred = rf_model.predict(X_test)\n",
    "\n",
    "# evaluate Model performance \n",
    "# Compute the RMSE\n",
    "rf_rmse = mean_squared_error(y_test, rf_pred , squared=False)\n",
    "\n",
    "# Compute the R2 score\n",
    "rf_r2 = r2_score(y_test, rf_pred )\n",
    "\n",
    "\n",
    "\n",
    "print('[RF]  Root Mean Squared Error: {0}'.format(rf_rmse))\n",
    "print('[RF]  R2: {0}'.format(rf_r2))\n",
    "\n",
    "\n",
    "#Because the RandomForestRegressor didn't seem to score well we will test the linear regression model \n",
    "\n",
    "# Create model and fit it to the training data\n",
    "lr_model = LinearRegression()\n",
    "\n",
    "# Fit the model to the training data \n",
    "lr_model.fit(X_train, y_train)\n",
    "\n",
    "#  Make predictions on the test data \n",
    "lr_pred = lr_model.predict(X_test)\n",
    "\n",
    "#Evaluate Mmodel \n",
    "\n",
    "# Compute the rsme score \n",
    "lr_rmse = mean_squared_error(y_test, lr_pred, squared=False)\n",
    "\n",
    "#  Compute the R2 score \n",
    "lr_r2 = r2_score(y_test, lr_pred)\n",
    "\n",
    "print('[LR]  Root Mean Squared Error: {0}'.format(lr_rmse))\n",
    "print('[LR]  R2: {0}'.format(lr_r2))\n",
    "\n",
    "#Based off the results printed below, the Linear regression model has around the same performance as the Random Forest model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 108 candidates, totalling 540 fits\n"
     ]
    }
   ],
   "source": [
    "# YOUR CODE\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "#3. Improve your model's performance by performing model selection and/or feature selection techniques to find best model for your problem.\n",
    "\n",
    "#Finding best parameters for model selection\n",
    "\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [10, 20, 30, None],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 3, 5]              \n",
    "}\n",
    "\n",
    "# Setup GridSearchCV for RandomForestRegressor, This will take a while to load at least up to 3 mins when I was working on it\n",
    "grid = GridSearchCV(rf_model, param_grid=param_grid,\n",
    "                           scoring='neg_root_mean_squared_error',\n",
    "                           cv=5,    n_jobs=-1 , verbose=1)\n",
    "\n",
    "grid_search = grid.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "dt_best_params = grid_search.best_params_\n",
    "\n",
    "\n",
    "dt_best_params\n",
    "\n",
    "\n",
    "# Input these best parameters values into the model\n",
    "rf_model = RandomForestRegressor(max_depth= dt_best_params['max_depth'], min_samples_leaf = dt_best_params['min_samples_leaf'], \n",
    "                                 min_samples_split= dt_best_params['min_samples_split'], n_estimators =  dt_best_params['n_estimators'])\n",
    "\n",
    "rf_model.fit(X_train, y_train)\n",
    "rf_pred = rf_model.predict(X_test)\n",
    "\n",
    "#Check if these new values improved the model\n",
    "# Compute the RMSE\n",
    "rf_rmse = mean_squared_error(y_test, rf_pred , squared=False)\n",
    "\n",
    "# Compute the R2 score\n",
    "rf_r2 = r2_score(y_test, rf_pred )\n",
    "\n",
    "\n",
    "# Based off the printed results, the scores haven't improved as much after the grid search for the best parameters \n",
    "print('[RF]  Root Mean Squared Error: {0}'.format(rf_rmse))\n",
    "print('[RF] RF R2: {0}'.format(rf_r2))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#Plot the results to see the slight differences between both the models. \n",
    "RMSE_Results = [ lr_rmse, rf_rmse]\n",
    "R2_Results = [ lr_r2, rf_r2]\n",
    "rg= np.arange(2)\n",
    "width = 0.35\n",
    "labels = ['LR', 'RF']\n",
    "\n",
    "Create bar plot with RMSE results\n",
    "plt.bar(rg, RMSE_Results, width, label=\"RMSE\")\n",
    "\n",
    "#Create bar plot with R2 results\n",
    "plt.bar(rg+width, R2_Results, width, label='R2')\n",
    "\n",
    "labels = ['LR', 'RF']\n",
    "plt.xticks(rg + width/2, labels)\n",
    "plt.xlabel(\"Models\")\n",
    "plt.ylabel(\"RMSE/R2\")\n",
    "\n",
    "plt.ylim([0,1])\n",
    "plt.title('Model Performance')\n",
    "plt.legend(loc='upper left', ncol=2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
